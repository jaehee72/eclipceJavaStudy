package java_study2.co.kr.jungbu;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

public class L19StreamAPIEx5 {
	class Student{
		//public(어디서든) protected(상속) default(같은 패키지 안에서) private : 접근지정자
		private String name;
		private boolean isMale;
		private int hak;
		private int ban;
		private int score;
		public Student(String name, boolean isMale, int hak, int ban, int score ) {
			this.name=name;
			this.isMale=isMale;
			this.hak=hak;
			this.ban=ban;
			this.score=score;
		}
		//set : 필드에 값을 지정하는 행위
		//get : 필드의 값을 반환하는 행위
		//캡슐화 : 객체의
		//외부에서 필드를 접근할 수 있게 생성한 함수
		//get set 함수는 디자인 패턴(구조, 형식)으로 개발자들이 사용하다가 너무 보기 좋아 약속으로 만든 것(js의 class를 도입하면서 문법을 만들었음)
		//get set을 필드를 정의하는 객체를 VariableObject Data TransferObject라 한다.
		//디자인 패턴과 Mode lViewController => Spring
		//캡슐화에 대해 아는 만큼 설명하라, vo dto가 무엇인가요, 디자인 패턴
		
		public String getName() {return name;}
		public boolean isMale() {return isMale;}
		public int getHak() {return hak;}
		public int getBan() {return ban;}
//		public int getScore() {return score;}

		
		
		public boolean setScore(int score) {	//생성자와 동일
			if(score<=100 && score>=0) {
				this.score = score;
				return true;
			}else {
				return false;
			}
		}
		
		@Override
		public String toString() {
			return "{"+name +","+isMale+","+hak+","+ban+","+ score+"}";
		}
	}

	public static void main(String[] args) {
	
		

		


		L19StreamAPIEx5 out=new L19StreamAPIEx5();
		List<Student> studentList=new ArrayList<Student>();
		
		studentList.add(out.new Student("나자바", true, 1, 1, 300));
		studentList.add(out.new Student("김지미", false, 1, 1, 250));
		studentList.add(out.new Student("김자바", true, 1, 1, 200));
		studentList.add(out.new Student("이지미", false, 1, 2, 150));
		studentList.add(out.new Student("남자바", true, 1, 2, 100));
		studentList.add(out.new Student("안지미", false, 1, 2, 50));
		studentList.add(out.new Student("황지미", false, 1, 3, 100));
		studentList.add(out.new Student("강지미", false, 1, 3, 150));
		
		studentList.add(out.new Student("나자바", true, 2, 1, 300));
		studentList.add(out.new Student("김지미", false, 2, 1, 250));
		studentList.add(out.new Student("김자바", true, 2, 1, 200));
		studentList.add(out.new Student("이지미", false, 2, 2, 150));
		studentList.add(out.new Student("남자바", true, 2, 2, 100));
		studentList.add(out.new Student("안지미", false, 2, 2, 50));
		studentList.add(out.new Student("황지미", false, 2, 3, 100));
		studentList.add(out.new Student("강지미", false, 2, 3, 150));

		studentList.add(out.new Student("나자바", true, 3, 1, 300));
		studentList.add(out.new Student("김지미", false, 3, 1, 250));
		studentList.add(out.new Student("김자바", true, 3, 1, 200));
		studentList.add(out.new Student("이지미", false, 3, 2, 150));
		studentList.add(out.new Student("남자바", true, 3, 2, 100));
		studentList.add(out.new Student("안지미", false, 3, 2, 50));
		studentList.add(out.new Student("황지미", false, 3, 3, 100));
		studentList.add(out.new Student("강지미", false, 3, 3, 150));
		
		
		
		//자료를 상상하고 구조화하는 연습 => 자료를 처리 => 필요한 자료
		//lazy연산 (연산 지연) : Stream api는 연산 지연을 한다.
		//반복문 == 일 (시간, 돈) Stream의 중간 연산과 최종 연산이 모두 반복문이라면 사용한 만큼 시간이 걸린다.

		System.out.println(studentList.get(0).getHak());
		//1학년 남자들의 점수
		Optional <String> boySum = studentList.stream()
				.filter(Student::isMale)
				.filter(p->p.p.hak==1)
				.map(p->p.score+"") //11 = "11"
				.reduce((s1, s2)->","+s2);
		System.out.println(boySum.get());
		long end = System.nanoTime();
		System.out.println("stream 연산 시간 :"+(end-start));
		String scores ="";
		for(Student s:studentList) {
			if(s.getHak()==1 && s.isMale) {
				
			}
		}
		//2학년 여자들의 점수
		//1학년 남자 여자 수를 collect로 구현하세요!
		//1학년은 남자 여자의 그룹으로 나누고 다시 통과(score>=150)와 낙제 그룹으로 나누세요 //partitioningBy사용
		//각학년별 남자 여자 그룹의 점수가 가장 높은 사람을 구하세요 // 집계함수 사용
		
		
		
	}	
	
}
